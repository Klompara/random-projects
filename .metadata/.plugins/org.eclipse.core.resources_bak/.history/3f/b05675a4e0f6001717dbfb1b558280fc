package pathfinder;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.image.BufferStrategy;

import javax.swing.JFrame;

public class Main extends Canvas implements Runnable{
	
	private static final long serialVersionUID = 4433339372853233415L;
	
	public static final int WIDTH = 1000, HEIGHT = WIDTH / 12 * 9;
	public Thread thread;
	public boolean running = false;
	
	private Field[][] fields = new Field[25][25];
	
	
	
	
	public Main(){
		for(int y = 0; y < fields.length; y++) {
			for(int x = 0; x < fields[0].length; x++) {
				fields[y][x] = new Field(false, false, x, y);
			}
		}
		fields[0][0].setStart(true);
		fields[24][24].setEnd(true);
		loadFrame();
	}

	public synchronized void start(){
		thread = new Thread(this);
		thread.start();
		running = true;
	}
	public synchronized void stop(){
		try{
			thread.join();
			running = false;
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public void run(){
		this.requestFocus();
		long lastTime = System.nanoTime();
		double amountOfTicks = 0.5;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int frames = 0;
		
		while(running){
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			while(delta >= 1){
				tick();
				delta--;
			}
			if(running)
				render();
			frames++;
			if(System.currentTimeMillis() - timer > 1000){
				timer += 1000;
				System.out.println("FPS: " + frames);
				frames = 0;
			}
		}
		stop();
	}
	
	Field fieldStart = null;
	Field fieldEnd = null;
	Field fieldCurrent = null;
	Field[] fieldsNext;
	Field fieldNext = null;
	int minF = 99999;
	int fieldsMoveCost = 0;
	int fieldsNextCount;
	int hx, hy, h;
	
	private void tick(){
		for(int y = 0; y < fields.length; y++) {
			for(int x = 0; x < fields[0].length; x++) {
				if(fields[y][x].isStart()) fieldStart = fields[y][x];
				if(fields[y][x].isEnd()) fieldEnd = fields[y][x];
			}
		}
		if(fieldCurrent == null)
			fieldCurrent = fieldStart;
		
		fieldsMoveCost++;
		fieldsNext = new Field[4];
		fieldsNextCount = 0;
		
		if(fieldCurrent.getX()-1 >= 0) {
			fieldsNextCount++;
			fieldsNext[fieldsNextCount-1] = fields[fieldCurrent.getX()-1][fieldCurrent.getY()];
		}
		if(fieldCurrent.getX()+1 < 24) {
			fieldsNextCount++;
			fieldsNext[fieldsNextCount-1] = fields[fieldCurrent.getX()+1][fieldCurrent.getY()];
		}
		if(fieldCurrent.getY()-1 >= 0) {
			fieldsNextCount++;
			fieldsNext[fieldsNextCount-1] = fields[fieldCurrent.getX()][fieldCurrent.getY()-1];
		}
		if(fieldCurrent.getY()+1 < 24) {
			fieldsNextCount++;
			fieldsNext[fieldsNextCount-1] = fields[fieldCurrent.getX()][fieldCurrent.getY()+1];
		}
		
		for(int i = 0; i < fieldsNextCount; i++) {
			if(!fieldsNext[i].isOpened()) {
				fieldsNext[i].setOpened(true);
				fieldsNext[i].setG(fieldsMoveCost);
				hx = fieldEnd.getX() - fieldsNext[i].getX();
				if(hx < 0) hx *= -1;
				hy = fieldEnd.getY() - fieldsNext[i].getY();
				if(hy < 0) hy *= -1;
				h = hx + hy;
				fieldsNext[i].setH(h);
				fieldsNext[i].setF(h + fieldsMoveCost);
				if(fieldsNext[i].getF() < minF) {
					minF = fieldsNext[i].getF(); 
					fieldNext = fieldsNext[i];
				}
			}
		}
		fieldCurrent = fieldNext;
	}
	
	private void render(){
		BufferStrategy bs = this.getBufferStrategy();
		if (bs == null){
			this.createBufferStrategy(2);
			return;
		}
		
		Graphics2D g = (Graphics2D) bs.getDrawGraphics();
		
		g.setColor(Color.darkGray);
		g.fillRect(0, 0, WIDTH, HEIGHT);
		
		
		for(int y = 0; y < fields.length; y++) {
			for(int x = 0; x < fields[0].length; x++) {
				g.setColor(Color.white);
				if(fields[y][x].isStart()) g.setColor(Color.green);
				if(fields[y][x].isEnd()) g.setColor(Color.red);
				if(fields[y][x].isOpened()) g.setColor(Color.lightGray);
				if(fields[y][x] == fieldCurrent) g.setColor(Color.blue);
				if(fieldsNext != null) {
					for(Field f : fieldsNext)
						if(f == fields[y][x]) g.setColor(Color.orange);
				}
				g.fillRect(x*25, y*25, 25, 25);
				g.setColor(Color.black);
				g.drawRect(x*25, y*25, 25, 25);
				if(fields[y][x].isOpened()) {
					g.setFont(new Font("", Font.PLAIN, 15));
					g.drawString(fields[y][x].getF() + "", x*25, y*25+15);
				}
			}
		}
		
		g.dispose();
		bs.show();
	}
	

	private void loadFrame() {
		JFrame frame = new JFrame("A* Pathfinder");
		frame.setPreferredSize(new Dimension(WIDTH, HEIGHT));
		frame.setMaximumSize(new Dimension(WIDTH, HEIGHT));
		frame.setMinimumSize(new Dimension(WIDTH, HEIGHT));
		
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setResizable(false);
		frame.setLocationRelativeTo(null);
		frame.add(this);
		frame.setVisible(true);
		this.start();
	}
	
	public static void main (String args[]){
		new Main();
	}
}