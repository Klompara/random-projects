package com.Game.net;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;

public class _Huber extends GameObject{
	private BufferedImage Player;
	private Handler handler;
	private float velX, velY;
	private int drehung = 0;
	private int hitradiant = 0;
	private int Health = 100;
	private boolean richtung = false;
	private boolean hit = false;
	private boolean coll = false, HL = false;
	public _Huber(float x, float y, ID id, Handler handler) {
		super(x, y, id);
		velX = 1;
		velY = 0;
		this.handler = handler;
		
		try {
			Player = ImageIO.read(getClass().getResourceAsStream("/Huber Robert.png"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		for(GameObject tempObject : handler.object){
			if(tempObject.getID() == ID.HTLBase){
				this.x = tempObject.getX() + 70;
				this.y = tempObject.getY() + 30;
			}
		}
	}

	public void tick() {
		
		collision();
		x += velX;
		y += velY;
		if(velX > 0)coll = false;
		if(coll == false){
			if(!richtung)drehung--;
			if(richtung)drehung++;
			if(drehung == -10)richtung = true;
			if(drehung == 10)richtung = false;
		}
		if(hit){
			if(hitradiant == 34){
				richtung = false;
				Schaden(6, ID.HTLBase);
			}
			if(hitradiant < 0)richtung = true;
			if(richtung)hitradiant++;
			if(!richtung)hitradiant--;
		}
	}
	private void Schaden(int HEALTH, ID hitid){
		for(GameObject tempObject : handler.object){
			if(tempObject.getID() == hitid){
				tempObject.setHealth(tempObject.getHealth() - HEALTH);
			}
		}
	}
	
	public void render(Graphics g) {
		Graphics2D g2 = (Graphics2D) g;
		
		RenderingHints rh = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		rh.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
		g2.setRenderingHints(rh);
		
		AffineTransform at = new AffineTransform();
		if(!hit){
			at.setToTranslation(x, y); 				// position x,y
			at.rotate(Math.toRadians(drehung), Player.getWidth()/2, Player.getHeight());		// rotation, set center rotation (30x30px picture)/2 = 15,15 "center"
		}else{
			at.setToTranslation(x, y); 				// position x,y
			at.rotate(Math.toRadians(hitradiant), Player.getWidth()/2, Player.getHeight());		// rotation, set center rotation (30x30px picture)/2 = 15,15 "center"
		}
		g2.drawImage(Player, at, null); 
	    
		Toolkit.getDefaultToolkit().sync();
		if(HL){
			g.setColor(Color.red);
			g.fillRect((int)x, (int)y-10, Player.getWidth(), 3);
			g.setColor(Color.blue);
			g.fillRect((int)x, (int)y-10, (int) (Health*0.3), 3);
			g.drawRect((int)x, (int)y-10, Player.getWidth(), 3);
		}
	}
	
	public Rectangle getBounds() {
		return new Rectangle((int)x, (int)y, Player.getWidth(), Player.getHeight());
	}
	
	public Rectangle getBoundsFront() {
		return new Rectangle((int)x+(Player.getWidth()/2)+10, (int)y, Player.getWidth()/2, Player.getHeight());
	}

	public Rectangle getBoundsBack() {
		return new Rectangle((int)x, (int)y, Player.getWidth()/2, Player.getHeight());
	}

	private void collision(){
		for(GameObject elem : handler.object){
			if(elem.getID() != ID.HTLBase && elem.getID() != ID.Special1Bullet && elem.getID() != ID.HAKBase && elem.getID() != ID.PKSpot && elem.getID() != ID.EKSpot){
				if(getBoundsFront().intersects(elem.getBoundsBack())){velX = 0; coll = true; drehung = 0;}
				if(elem.x > x+40)velX = 1;
			}
			if(elem.getID() == ID.HAKBase){
				if(getBounds().intersects(elem.getBounds())){
					hit = true;
					coll = true;
					velX = 0;
				}else hit = false; coll = false;// velX = 1;
			}
		}
	}
	
	public void HL(boolean HL) {
		this.HL = HL;
	}
}

