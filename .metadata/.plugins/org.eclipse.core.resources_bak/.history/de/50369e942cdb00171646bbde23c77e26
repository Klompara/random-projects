package Game;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.awt.image.FilteredImageSource;

public class Player {

	private double x, y;
	private Color color;
	
	private double dx;
	private double dy;
	private double rad;
	private double speed;
	private double angle = 0;
	public boolean left;
	public boolean right;
	private double angleMove = 4;
	private double normalSpeed;
	private Main main;
	private MixerFilter myFilter = new MixerFilter(new Color(0,0,10, 10));
	public Player(double x, double y, Main main) {
		this.x = x;
		this.y = y;
		color = Color.green;
		normalSpeed = 5;
		this.main = main;
	}
	
	public void tick() {
		if(colliding()) {
			System.out.println("Colliding");
		}
		if(left) angle-=angleMove+normalSpeed/3;
		if(right) angle+=angleMove+normalSpeed/3;
		
		speed = normalSpeed;
		
		rad = Math.toRadians(angle);
		dx = Math.cos(rad) * speed;
		dy = Math.sin(rad) * speed;
		
		x += dx;
		y += dy;
		
		main.setBiMap(toBufferedImage(Toolkit.getDefaultToolkit().createImage(new FilteredImageSource(main.getBiMap().getSource(), myFilter))));
		
	}
	
	private boolean colliding() {
		boolean rgw = false;
		Color pixelColor = new Color(main.getBiMap().getRGB((int)x, (int)y));
		if(pixelColor != color && pixelColor != new Color(0,0,0)) {
			rgw = true;
		}
		
		return rgw;
	}
	
	public void render(Graphics2D g) {
		g = main.getBiMap().createGraphics();
		g.setColor(color);
		g.fillOval((int)x, (int)y, 10, 10);
	}
	
	
	public static BufferedImage toBufferedImage(Image img)
	{
	    if (img instanceof BufferedImage)
	    {
	        return (BufferedImage) img;
	    }

	    // Create a buffered image with transparency
	    BufferedImage bimage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);

	    // Draw the image on to the buffered image
	    Graphics2D bGr = bimage.createGraphics();
	    bGr.drawImage(img, 0, 0, null);
	    bGr.dispose();

	    // Return the buffered image
	    return bimage;
	}
}
